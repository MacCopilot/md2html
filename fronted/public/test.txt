<ul>
<li>
<a href="#websocket">websocket</a><ul>
<li>
<a href="#websocket-">websocket 实践</a><ul>
<li>
<a href="#heading">完整代码</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="websocket">websocket</h1>
<blockquote>
<p>WebSocket是一种在客户端和服务器之间进行全双工通信的网络协议。它允许在一个持久连接上进行实时数据传输，比传统的HTTP请求-响应模式更高效。</p>
</blockquote>
<p>WebSocket特点：</p>
<ul>
<li>双向通信：WebSocket允许客户端和服务器之间进行双向通信，而不是仅限于客户端发出请求，服务器回复响应的模式。这使得实时的数据传输成为可能，例如聊天应用程序、实时游戏和实时数据更新等。</li>
<li>持久连接：WebSocket连接在客户端和服务器之间是持久的，一旦建立连接，它将保持打开状态，直到其中一方主动关闭连接。</li>
<li>低延迟：与传统的HTTP请求-响应相比，WebSocket的实时性更高，因为它不需要在每个请求和响应之间建立新的连接，减少了通信的延迟。</li>
<li>更少的数据开销：由于WebSocket连接是持久的，不需要在每次通信时发送额外的头部信息，所以它比频繁的HTTP请求更加高效，减少了数据传输的开销。</li>
</ul>
<p>WebSocket协议通常运行在与HTTP相同的端口上，可以通过ws://（未加密）或wss://（加密）来访问。在现代Web开发中，WebSocket被广泛应用于实时通信和实时数据传输场景，使得开发者可以轻松地构建实时互动的Web应用程序。</p>
<h2 id="websocket-">websocket 实践</h2>
<p>下面代码是一个React组件中使用<code>useEffect</code>钩子实现WebSocket连接的逻辑。让我们逐步解释它：</p>
<ol>
<li>
<p><code>useEffect</code>钩子：这是React中的副作用钩子，它允许在组件渲染后执行副作用操作，比如数据获取、订阅事件等。在这段代码中，<code>useEffect</code>用于处理WebSocket连接的建立和关闭。</p>
</li>
<li>
<p>声明变量：在<code>useEffect</code>函数的开头，声明了一些变量和引用：</p>
<ul>
<li><code>ws</code>：一个WebSocket对象或null，用于在组件范围内存储WebSocket连接实例。</li>
<li><code>reconnectRef</code>：一个React引用，用于在WebSocket连接断开后记录重新连接的尝试次数。</li>
</ul>
</li>
<li>
<p>条件检查：在<code>useEffect</code>内部，首先检查<code>userStateIn</code>是否为真。<code>userStateIn</code>可能是组件的一个状态值，用于判断用户是否登录。只有当用户已登录时，才会执行后续的逻辑。</p>
</li>
<li>
<p>获取未读消息数量：如果<code>userStateIn</code>为真，会调用<code>getUnreadCount</code>函数来获取未读消息的数量，并将其设置为组件的状态变量<code>unReadCount</code>。这个步骤可能是为了在连接建立之前，先获取一些数据并进行展示。</p>
</li>
<li>
<p>WebSocket连接建立：在<code>fetchData</code>函数内部，首先调用<code>getSession</code>函数来获取用户会话信息。然后根据会话信息创建WebSocket连接。</p>
<ul>
<li>根据配置来选择WebSocket协议，使用<code>use_https_url</code>的值来决定是使用<code>wss</code>还是<code>ws</code>。</li>
<li>通过<code>backend_websocket_url</code>和<code>session.user_id</code>构建WebSocket的URL。</li>
<li>在连接建立后，使用用户的<code>access_token</code>发送一条消息到服务器。</li>
</ul>
</li>
<li>
<p>WebSocket消息处理：设置WebSocket的<code>onmessage</code>事件处理程序，用于接收来自服务器的消息，并将消息解析为JSON格式。接收到的消息中包含未读消息数量，将其设置为组件的状态变量<code>unReadCount</code>。</p>
</li>
<li>
<p>WebSocket连接关闭：设置WebSocket的<code>onclose</code>事件处理程序，用于在连接关闭时执行一些操作。如果连接非正常关闭（例如网络问题等），将尝试重新连接，最多尝试三次。</p>
</li>
<li>
<p>条件检查与函数调用：根据<code>userStateIn</code>的值，判断是否需要执行WebSocket连接建立的过程。如果用户已登录，则执行<code>fetchData</code>函数，建立WebSocket连接。</p>
</li>
<li>
<p>清理：返回一个清理函数，该函数在组件卸载前执行。在清理函数中，如果WebSocket连接存在，则关闭连接。</p>
</li>
</ol>
<p>总结：这段代码实现了在用户登录状态下建立WebSocket连接，并在连接建立后接收和处理来自服务器的实时消息。当用户未登录或WebSocket连接出现异常时，会尝试重新连接，最多尝试三次。</p>
<h3 id="heading">完整代码</h3>
<codeblock class="ts"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 2</span><span class="cl">    <span class="kd">let</span> <span class="nx">ws</span>: <span class="kt">WebSocket</span> <span class="o">|</span> <span class="kc">null</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">userStateIn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 4</span><span class="cl">      <span class="nx">getUnreadCount</span><span class="p">({}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">data</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">unread_count</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">          <span class="nx">setUnReadCount</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">unread_count</span><span class="p">);</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">      <span class="p">});</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="kr">async</span> <span class="kd">function</span> <span class="nx">fetchData() {</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">      <span class="kr">const</span> <span class="nx">session</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">getSession</span><span class="p">();</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">session</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="kr">const</span> <span class="nx">wsproto</span> <span class="o">=</span> <span class="nx">use_https_url</span> <span class="o">===</span> <span class="s2">&#34;true&#34;</span> <span class="o">?</span> <span class="s2">&#34;wss&#34;</span> <span class="o">:</span> <span class="s2">&#34;ws&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">        <span class="nx">ws</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebSocket</span><span class="p">(</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">          <span class="sb">`</span><span class="si">${</span><span class="nx">wsproto</span><span class="si">}</span><span class="sb">://</span><span class="si">${</span><span class="nx">backend_websocket_url</span><span class="si">}</span><span class="sb">/ws?user_id=</span><span class="si">${</span><span class="nx">session</span><span class="p">.</span><span class="nx">user_id</span><span class="si">}</span><span class="sb">`</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">        <span class="p">);</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">
</span></span><span class="line"><span class="ln">19</span><span class="cl">        <span class="nx">ws</span><span class="p">.</span><span class="nx">onopen</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">          <span class="k">if</span> <span class="p">(</span><span class="nx">ws</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">            <span class="nx">ws</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="sb">`</span><span class="si">${</span><span class="nx">session</span><span class="p">.</span><span class="nx">access_token</span><span class="si">}</span><span class="sb">`</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;websocket connection established&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">
</span></span><span class="line"><span class="ln">26</span><span class="cl">        <span class="nx">ws</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">          <span class="kr">const</span> <span class="nx">obj</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">          <span class="nx">setUnReadCount</span><span class="p">(</span><span class="nx">obj</span><span class="p">.</span><span class="nx">unread_count</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">          <span class="c1">// Assuming you have a state setter for the unread count
</span></span></span><span class="line"><span class="ln">30</span><span class="cl"><span class="c1"></span>          <span class="c1">// setUnReadCount(obj.unread_count);
</span></span></span><span class="line"><span class="ln">31</span><span class="cl"><span class="c1"></span>        <span class="p">};</span>
</span></span><span class="line"><span class="ln">32</span><span class="cl">
</span></span><span class="line"><span class="ln">33</span><span class="cl">        <span class="nx">ws</span><span class="p">.</span><span class="nx">onclose</span> <span class="o">=</span> <span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;websocket connection closed&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">          <span class="c1">// Reconnect on unexpected closure (you can add more conditions to handle specific closure codes)
</span></span></span><span class="line"><span class="ln">36</span><span class="cl"><span class="c1"></span>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">event</span><span class="p">.</span><span class="nx">wasClean</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">37</span><span class="cl">            <span class="nx">reconnectRef</span><span class="p">.</span><span class="nx">current</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">// 使用ref的current属性修改reconnect值
</span></span></span><span class="line"><span class="ln">38</span><span class="cl"><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="nx">reconnectRef</span><span class="p">.</span><span class="nx">current</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">39</span><span class="cl">              <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span>
</span></span><span class="line"><span class="ln">40</span><span class="cl">                <span class="s2">&#34;websocket connection closed unexpectedly, attempting to reconnect...:&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="ln">41</span><span class="cl">                <span class="nx">reconnectRef</span><span class="p">.</span><span class="nx">current</span>
</span></span><span class="line"><span class="ln">42</span><span class="cl">              <span class="p">);</span>
</span></span><span class="line"><span class="ln">43</span><span class="cl">              <span class="nx">fetchData</span><span class="p">();</span>
</span></span><span class="line"><span class="ln">44</span><span class="cl">            <span class="p">}</span>
</span></span><span class="line"><span class="ln">45</span><span class="cl">          <span class="p">}</span>
</span></span><span class="line"><span class="ln">46</span><span class="cl">        <span class="p">};</span>
</span></span><span class="line"><span class="ln">47</span><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="ln">48</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">49</span><span class="cl">
</span></span><span class="line"><span class="ln">50</span><span class="cl">    <span class="k">if</span> <span class="p">(</span><span class="nx">userStateIn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">51</span><span class="cl">      <span class="nx">fetchData</span><span class="p">();</span>
</span></span><span class="line"><span class="ln">52</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">53</span><span class="cl">
</span></span><span class="line"><span class="ln">54</span><span class="cl">    <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">55</span><span class="cl">      <span class="k">if</span> <span class="p">(</span><span class="nx">ws</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">56</span><span class="cl">        <span class="nx">ws</span><span class="p">.</span><span class="nx">close</span><span class="p">();</span>
</span></span><span class="line"><span class="ln">57</span><span class="cl">      <span class="p">}</span>
</span></span><span class="line"><span class="ln">58</span><span class="cl">    <span class="p">};</span>
</span></span><span class="line"><span class="ln">59</span><span class="cl">  <span class="p">},</span> <span class="p">[</span><span class="nx">userStateIn</span><span class="p">]);</span>
</span></span></codeblock>